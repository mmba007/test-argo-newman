{
	"info": {
		"_postman_id": "9b20f6b1-7258-4aa1-8a63-fd181201af17",
		"name": "JSONPlaceholder-Posts-fake",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "14779694"
	},
	"item": [
		{
			"name": "Get Posts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for status code 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Test for Content-Type header to be application/json\r",
							"pm.test(\"Content-Type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"// Test that the response is an array\r",
							"pm.test(\"Response should be an array\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an('array');\r",
							"});\r",
							"\r",
							"// Test that the response contains at least one item\r",
							"pm.test(\"Response array should not be empty\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.length).to.be.above(0);\r",
							"});\r",
							"\r",
							"// Test that each post contains userId, id, title, and body fields\r",
							"pm.test(\"Each post should have userId, id, title, and body\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    jsonData.forEach(function (post) {\r",
							"        pm.expect(post).to.have.property(\"userId\");\r",
							"        pm.expect(post).to.have.property(\"id\");\r",
							"        pm.expect(post).to.have.property(\"title\");\r",
							"        pm.expect(post).to.have.property(\"body\");\r",
							"    });\r",
							"});\r",
							"\r",
							"// Test that userId is a number and between 1 and 10 (since JSONPlaceholder uses userId between 1 and 10)\r",
							"pm.test(\"userId should be between 1 and 10\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    jsonData.forEach(function (post) {\r",
							"        pm.expect(post.userId).to.be.a('number');\r",
							"        pm.expect(post.userId).to.be.within(1, 10);\r",
							"    });\r",
							"});\r",
							"\r",
							"// Test that id is a number\r",
							"pm.test(\"id should be a number\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    jsonData.forEach(function (post) {\r",
							"        pm.expect(post.id).to.be.a('number');\r",
							"    });\r",
							"});\r",
							"\r",
							"// Test that title is a string and not empty\r",
							"pm.test(\"Title should be a non-empty string\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    jsonData.forEach(function (post) {\r",
							"        pm.expect(post.title).to.be.a('string');\r",
							"        pm.expect(post.title).to.not.be.empty;\r",
							"    });\r",
							"});\r",
							"\r",
							"// Test that body is a string and not empty\r",
							"pm.test(\"Body should be a non-empty string\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    jsonData.forEach(function (post) {\r",
							"        pm.expect(post.body).to.be.a('string');\r",
							"        pm.expect(post.body).to.not.be.empty;\r",
							"    });\r",
							"});\r",
							"\r",
							"// Test that the response time is less than 500ms\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/posts",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"posts"
					]
				}
			},
			"response": []
		}
	]
}